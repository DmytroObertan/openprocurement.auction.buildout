[buildout]
extends =
    versions.cfg
    project.cfg

parts =
    mkdirs
    scripts
    circusd
    circus.ini
    couchdb.ini
    auctions.ini
    redis.conf
    auctions_data_bridge.yaml
    oauth_provider.ini
    auction_worker_defaults.json

find-links =
    http://op:x9W3jZ@dist.quintagroup.com/op/
    http://dist.quintagroup.com/proxy/pypi/

[ports]
recipe = teamrubber.recipe.portbase
base = ${project:base-port}

[config-from-template]
recipe = collective.recipe.template[genshi]:genshi
input = profiles/templates/${:_buildout_section_name_}
output = etc/${:_buildout_section_name_}


[mkdirs]
recipe =  z3c.recipe.mkdir
paths = 
    ${buildout:directory}/var/log
    ${buildout:directory}/var/redis
    ${buildout:directory}/var/couchdb

[scripts]
recipe = zc.recipe.egg
eggs = 
    Paste
    PasteScript
    PasteDeploy
    flask-project-templates
    ZopeSkel
    openprocurement.auction
    openprocurement.auth
    CouchDB
    circus
    circus-web
    gunicorn
    ExtendedJournalHandler

interpreter = python_interpreter

[circusd]
<=scripts
initialization =
    sys.argv[1:1] = ('${buildout:directory}/etc/circus.ini').split()
interpreter = circusd_python
scripts = circusd

[circus.ini]
<= config-from-template
statsd = 0
httpd = 0
httpd_host = 0.0.0.0
httpd_port =${ports:8}
endpoint = tcp://127.0.0.1:${ports:5}
pubsub_endpoint = tcp://127.0.0.1:${ports:6}
stats_endpoint = tcp://127.0.0.1:${ports:7}

[couchdb.ini]
<= config-from-template
port = ${ports:0}
host = 127.0.0.1
couchdb_admin = ${project:couchdb_admin}
couchdb_password = ${project:couchdb_password}


[auctions.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:1}
workers = 2
redis_url = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}
external_couch_url = http://localhost:${ports:1}/auction 
internal_couch_url = http://localhost:${ports:0}/
auctions_db =  ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
HASH_SECRET_KEY = ${project:hash_secret_key}

[redis.conf]
<= config-from-template
port = ${ports:2}
dir = ${buildout:directory}/var/redis
password = ${project:redis_password}


[auctions_data_bridge.yaml]
<= config-from-template
tenders_api_server = http://api-sandbox.openprocurement.org
tenders_api_version = 0.5
couch_url = http://localhost:${ports:0}/
auctions_db = ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
endpoint = ${circus.ini:endpoint}
pubsub_endpoint = ${circus.ini:pubsub_endpoint}
auction_worker = ${buildout:directory}/bin/auction_worker
auction_worker_config = ${buildout:directory}/etc/auction_worker_defaults.json


[oauth_provider.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:3}
workers = 1
sqlite = sqlite:///${buildout:directory}/var/oauth_provider.sqlite
secret = 1234567
hash_secret_key = ${project:hash_secret_key}
timezone = ${project:timezone}
auction_client_id = ${project:auction_client_id}
auction_client_secret = ${project:auction_client_secret}

[auction_worker_defaults.json]
<= config-from-template
TENDERS_API_URL = http://api-sandbox.openprocurement.org/
TENDERS_API_VERSION = 0.5
TENDERS_API_TOKEN = bfb75ce545154da382fc2ccd924d667c
AUCTIONS_URL = http://auction-sandbox.openprocurement.org/tenders/{auction_id}
HASH_SECRET = ${project:hash_secret_key}
COUCH_DATABASE = http://localhost:${ports:0}/${project:auctions_couchdb_databese_name}
OAUTH_CLIENT_ID = ${project:auction_client_id}
OAUTH_CLIENT_SECRET = ${project:auction_client_secret}
OAUTH_BASE_URL = http://localhost:${ports:3}/api/
OAUTH_REQUEST_TOKEN_URL = 
OAUTH_ACCESS_TOKEN_URL = http://localhost:${ports:3}/oauth/token
OAUTH_AUTHORIZE_URL = http://localhost:${ports:3}/oauth/authorize
TZ = ${project:timezone}
STARTS_PORT = ${ports:10}
REDIS_URL = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}